package handlers

import (
	"elemei/internal/service"
	"elemei/internal/typ/req"
	"elemei/internal/typ/resp"
	"fmt"
	"github.com/gin-gonic/gin"
	"log"
	"net/http"
)

// CreateOrder customer create order.
func CreateOrder(ctx *gin.Context) {
	var createOrderReq req.CreateOrderReq
	if err := ctx.ShouldBindJSON(&createOrderReq); err != nil {
		log.Println(fmt.Errorf("[CreateOrder] param bind error: %v", err))
		ctx.JSON(http.StatusBadRequest, &resp.T{
			MetaData: &resp.MetaData{
				Code: http.StatusBadRequest,
				Msg:  "An error message generated by ShouldBindJson: " + err.Error(),
			},
		})
		return
	}
	if err := service.CreateOrder(createOrderReq); err != nil {
		log.Println(fmt.Sprintf("[CreateOrder] wrong: %v", err))
		ctx.JSON(http.StatusBadRequest, &resp.T{
			MetaData: &resp.MetaData{
				Code: http.StatusBadRequest,
				Msg:  "An error message generated by service.CreateOrder: " + err.Error(),
			},
		})
		return
	}
	ctx.JSON(http.StatusOK, &resp.T{
		MetaData: &resp.MetaData{
			Code: http.StatusOK,
			Msg:  "Create order successfully.",
		},
	})
	return
}

// UpdateStatus update order's status
func UpdateStatus(ctx *gin.Context) {
	var updateOrderStatusReq req.UpdateOrderReq
	if err := ctx.ShouldBindJSON(&updateOrderStatusReq); err != nil {
		log.Println(fmt.Errorf("[UpdateOrderStatus] param bind error: %v", err))
		ctx.JSON(http.StatusBadRequest, &resp.T{
			MetaData: &resp.MetaData{
				Code: http.StatusBadRequest,
				Msg:  "An error message generated by ShouldBindJson: " + err.Error(),
			},
		})
		return
	}
	if err := service.UpdateOrder(updateOrderStatusReq); err != nil {
		log.Println(fmt.Sprintf("[UpdateOrder] wrong: %v", err))
		ctx.JSON(http.StatusBadRequest, &resp.T{
			MetaData: &resp.MetaData{
				Code: http.StatusBadRequest,
				Msg:  "An error message generated by service.UpdateOrder: " + err.Error(),
			},
		})
		return
	}
	ctx.JSON(http.StatusOK, &resp.T{
		MetaData: &resp.MetaData{
			Code: http.StatusOK,
			Msg:  "Update Order Status Successfully.",
		},
	})
}

// GetOrderListByUserID get order list by user id
func GetOrderListByUserID(ctx *gin.Context) {
	var getOrderListByUserIDReq req.GetOrderListByUserIDReq
	if err := ctx.ShouldBindJSON(&getOrderListByUserIDReq); err != nil {
		log.Println(fmt.Errorf("[GetOrderListByUserID] param bind error: %v", err))
		ctx.JSON(http.StatusBadRequest, &resp.T{
			MetaData: &resp.MetaData{
				Code: http.StatusBadRequest,
				Msg:  "An error message generated by ShouldBindJson: " + err.Error(),
			},
		})
	}
	orderList, err := service.GetOrderListByUserID(getOrderListByUserIDReq)
	if err != nil {
		log.Println(fmt.Sprintf("[GetOrderListByUserID] wrong: %v", err))
		ctx.JSON(http.StatusBadRequest, &resp.T{
			MetaData: &resp.MetaData{
				Code: http.StatusBadRequest,
				Msg:  "An error message generated by service.GetOrderListByUserID: " + err.Error(),
			},
		})
		return
	}
	ctx.JSON(http.StatusOK, &resp.T{
		MetaData: &resp.MetaData{
			Code: http.StatusOK,
			Msg:  "Get Order List Successfully",
		},
		Result: orderList,
	})
	return
}

// GetOrderListByStatus get order list by status
func GetOrderListByStatus(ctx *gin.Context) {
	var getOrderListByStatusReq req.GetOrderListByStatusReq
	if err := ctx.ShouldBindJSON(&getOrderListByStatusReq); err != nil {
		log.Println(fmt.Errorf("[GetOrderListByStatus] param bind error: %v", err))
		ctx.JSON(http.StatusBadRequest, &resp.T{
			MetaData: &resp.MetaData{
				Code: http.StatusBadRequest,
				Msg:  "An error message generated by ShouldBindJson: " + err.Error(),
			},
		})
	}
	orderList, err := service.GetOrderListByStatus(getOrderListByStatusReq)
	if err != nil {
		log.Println(fmt.Sprintf("[GetOrderListByStatus] wrong: %v", err))
		ctx.JSON(http.StatusBadRequest, &resp.T{
			MetaData: &resp.MetaData{
				Code: http.StatusBadRequest,
				Msg:  "An error message generated by service.GetOrderListByStatus: " + err.Error(),
			},
		})
		return
	}
	ctx.JSON(http.StatusOK, &resp.T{
		MetaData: &resp.MetaData{
			Code: http.StatusOK,
			Msg:  "Get Order List Successfully",
		},
		Result: orderList,
	})
	return
}
