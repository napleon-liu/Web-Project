package handlers

import (
	"elemei/internal/service"
	"elemei/internal/typ/req"
	"elemei/internal/typ/resp"
	"fmt"
	"github.com/gin-gonic/gin"
	"net/http"
)

// GetDishList user and employee interface. show all dish
func GetDishList(ctx *gin.Context) {
	dishes, err := service.GetAllDishes()
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, &resp.T{
			MetaData: &resp.MetaData{
				Code: http.StatusInternalServerError,
				Msg:  "An error message generated by service.GetAllDishes: " + err.Error(),
			},
		})
		return
	}
	ctx.JSON(http.StatusOK, &resp.T{
		MetaData: &resp.MetaData{
			Code: http.StatusOK,
			Msg:  "Get all dishes successfully",
		},
		Result: dishes,
	})
}

// UpdateDish employee interface. update dish information
func UpdateDish(ctx *gin.Context) {
	var updateReq req.UpdateDishReq
	if err := ctx.ShouldBindJSON(&updateReq); err != nil {
		ctx.JSON(http.StatusBadRequest, &resp.T{
			MetaData: &resp.MetaData{
				Code: http.StatusBadRequest,
				Msg:  "Parameter binding error: " + err.Error(),
			},
		})
		return
	}
	err := service.UpdateDish(updateReq)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, &resp.T{
			MetaData: &resp.MetaData{
				Code: http.StatusInternalServerError,
				Msg:  "An error message generated by service.UpdateDish: " + err.Error(),
			},
		})
		return
	}
	ctx.JSON(http.StatusOK, &resp.T{
		MetaData: &resp.MetaData{
			Code: http.StatusOK,
			Msg:  "Dish updated successfully",
		},
	})
}

// CreateDish employee interface. create new dish information.
func CreateDish(ctx *gin.Context) {
	var createReq req.CreateDishReq
	if err := ctx.ShouldBindJSON(&createReq); err != nil {
		ctx.JSON(http.StatusBadRequest, &resp.T{
			MetaData: &resp.MetaData{
				Code: http.StatusBadRequest,
				Msg:  "Parameter binding error: " + err.Error(),
			},
		})
		return
	}
	id, err := service.CreateDish(createReq)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, &resp.T{
			MetaData: &resp.MetaData{
				Code: http.StatusInternalServerError,
				Msg:  "An error message generated by service.CreateDish: " + err.Error(),
			},
		})
		return
	}
	ctx.JSON(http.StatusOK, &resp.T{
		MetaData: &resp.MetaData{
			Code: http.StatusOK,
			Msg:  fmt.Sprintf("Dish created successfully: %d", id),
		},
	})
}

// DeleteDish employee interface. delete dish information.
func DeleteDish(ctx *gin.Context) {
	var deleteReq req.DeleteDishReq
	if err := ctx.ShouldBindJSON(&deleteReq); err != nil {
		ctx.JSON(http.StatusBadRequest, &resp.T{
			MetaData: &resp.MetaData{
				Code: http.StatusBadRequest,
				Msg:  "Parameter binding error: " + err.Error(),
			},
		})
		return
	}
	err := service.DeleteDish(deleteReq.IDs)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, &resp.T{
			MetaData: &resp.MetaData{
				Code: http.StatusInternalServerError,
				Msg:  "An error message generated by service.DeleteDish: " + err.Error(),
			},
		})
		return
	}
	ctx.JSON(http.StatusOK, &resp.T{
		MetaData: &resp.MetaData{
			Code: http.StatusOK,
			Msg:  "Dish deleted successfully",
		},
	})
}

// GetDishDetail user and employee interface. show specific dish detail
func GetDishDetail(ctx *gin.Context) {
	var detailReq req.GetDishDetailReq
	if err := ctx.ShouldBindJSON(&detailReq); err != nil {
		ctx.JSON(http.StatusBadRequest, &resp.T{
			MetaData: &resp.MetaData{
				Code: http.StatusBadRequest,
				Msg:  "Parameter binding error: " + err.Error(),
			},
		})
		return
	}
	dish, err := service.GetDishDetail(detailReq.ID)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, &resp.T{
			MetaData: &resp.MetaData{
				Code: http.StatusInternalServerError,
				Msg:  "An error message generated by service.GetDishDetail: " + err.Error(),
			},
		})
		return
	}
	ctx.JSON(http.StatusOK, &resp.T{
		MetaData: &resp.MetaData{
			Code: http.StatusOK,
			Msg:  "get dish details successfully",
		},
		Result: dish,
	})
}
